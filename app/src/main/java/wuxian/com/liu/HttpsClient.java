/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package wuxian.com.liu;

import javax.net.ssl.HostnameVerifier;
import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
import javax.net.ssl.SSLSession;
import java.io.UnsupportedEncodingException;
import android.util.Base64;
import java.net.URLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.HttpsURLConnection;
import java.net.MalformedURLException;
import java.io.IOException;
import java.net.ProtocolException;
import java.net.URL;
import javax.net.ssl.SSLSocketFactory;
import java.util.Map;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlPullParser;
import java.io.StringReader;
import java.io.Reader;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.OutputStream;
import android.content.Context;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.res.Resources;
import android.os.Handler;
import javax.net.ssl.X509TrustManager;
import java.security.SecureRandom;
import android.util.Log;

public class HttpsClient {
    private static final String TAG = "OpenVPNHttpsClient";
    
    public HttpsClient() {
    }
    
    private static void raise_dialog(Context context, String title, String msg) {
        new AlertDialog.Builder(context).setTitle(title).setMessage(msg).setPositiveButton(0x7f060003, new HttpsClient.1()).show();
    }
    
    private static String resstr(Context context, int res_id) {
        return getResources().getString(res_id);
    }
    
    public static void run_task(Context context, HttpsClient.Task task, HttpsClient.CancelDetect.I cancel_source, Runnable on_fail, boolean enable_cert_dialog, boolean enable_trust_error_dialog, long max_download_size) {
        Handler handler = new Handler();
        try {
            TrustMan tm = new TrustMan(context);
            SSLContext sc = SSLContext.getInstance("TLS");
            HttpsClient.CancelDetect cancel = new HttpsClient.CancelDetect(cancel_source);
            sc.init(0x0, new X509TrustManager[] {tm}, new SecureRandom());
            HttpsClient.AdaptiveHostnameVerifier hv = new HttpsClient.AdaptiveHostnameVerifier();
            HttpsClient.2 interact = new HttpsClient.Interact(cancel, context, enable_trust_error_dialog, handler, on_fail, task) {
                
                public void error_dialog(int title_resid, int msg_resid, Object obj) {
                    HttpsClient.2.1 mytask = new Runnable(this, obj, title_resid, msg_resid) {
                        
                        public void run() {
                            if(val$cancel.is_canceled()) {
                                return;
                            }
                            if((!obj instanceof Exception) || (!TrustMan.isTrustFail((Exception)obj))) {
                                if(title_resid != 0) {
                                    if(msg_resid != 0) {
                                        sb.append(resstr(val$context, msg_resid));
                                    }
                                    if(obj != null) {
                                        if(sb.length() > 0) {
                                            sb.append(" : ");
                                        }
                                        sb.append(obj.toString());
                                    }
                                    String title = resstr(val$context, title_resid);
                                    String msg = sb.toString();
                                    if(val$enable_trust_error_dialog) {
                                        raise_dialog(val$context, title, msg);
                                    }
                                    val$handler.post(val$on_fail);
                                }
                            }
                        }
                    };
                    handler.post(mytask);
                }
                
                public void challenge_response_dialog(HttpsClient.AuthContext ac, String client_reason) {
                    HttpsClient.2.2 mytask = new Runnable(this, ac, client_reason) {
                        
                        public void run() {
                            // :( Parsing error. Please contact me.
                        }
                    };
                    handler.post(mytask);
                }
            };
            task.sslContext = sc;
            task.hostnameVerifier = hv;
            task.interact = interact;
            task.max_download_size = max_download_size;
            tm.setCallback(new TrustMan.Callback(enable_cert_dialog, context, tm, cancel, task, handler, on_fail, hv) {
                
                public void onTrustFail(TrustMan.TrustContext tc) {
                    HttpsClient.3.1 warn_task = new Runnable(this, tc) {
                        
                        public void run() {
                            if(val$enable_cert_dialog) {
                                HttpsClient.3.1.1 localHttpsClient.3.1.11 = new CertWarn(this, val$context, tc.chain[0x0], tc.excep.toString() {
                                    
                                    protected void done(int response) {
                                        if(response == 0x1) {
                                            val$tm.trustCert(val$tc);
                                            if(!val$cancel.is_canceled()) {
                                                new Thread(val$task).start();
                                            }
                                            return;
                                        }
                                        if(!val$cancel.is_canceled()) {
                                            val$handler.post(val$on_fail);
                                        }
                                    }
                                });
                                return;
                            }
                            raise_dialog(val$context, resstr(val$context, 0x7f0600b5), resstr(val$context, 0x7f0600b6));
                            val$handler.post(val$on_fail);
                        }
                    };
                    handler.post(warn_task);
                }
                
                public void onTrustSucceed(boolean appTrusted) {
                    hv.allowAll(appTrusted);
                }
            });
            new Thread(task).start();
            return;
        } catch(Exception e) {
            Log.e("OpenVPNHttpsClient", "run_task", e);
            raise_dialog(context, resstr(context, 0x7f0600b8), e.toString());
            handler.post(on_fail);
        }
    }
}
