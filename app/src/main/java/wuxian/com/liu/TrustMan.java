/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package wuxian.com.liu;

import java.security.cert.X509Certificate;
import java.security.cert.CertificateException;
import javax.net.ssl.X509TrustManager;
import java.security.KeyStore;
import java.io.File;
import android.content.Context;
import android.util.Log;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.TrustManager;
import java.security.KeyStoreException;
import java.security.cert.CertificateExpiredException;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.FileInputStream;
import java.security.Principal;
import java.security.cert.Certificate;
import java.io.FileOutputStream;
import java.io.OutputStream;

public class TrustMan implements X509TrustManager {
    private static final String KEYSTORE_FILE = "trusted-certs.keystore";
    private static final String TAG = "TrustMan";
    private KeyStore appKeyStore;
    private X509TrustManager appTrustManager;
    private int current_generation;
    private X509TrustManager defaultTrustManager;
    private File keyStoreFile;
    private TrustMan.Callback parent;
    private static int generation = 0x0;
    
    public TrustMan(Context c) throws TrustMan.Error {
        File dir = c.getFilesDir();
        keyStoreFile = new File(dir + File.separator + "trusted-certs.keystore");
        reload();
    }
    
    private void check_reload() {
        try {
            if(current_generation != generation) {
                reload();
                return;
            }
        } catch(TrustMan.Error e) {
            Log.e("TrustMan", "check_reload", e);
        }
    }
    
    private void reload() throws TrustMan.Error {
        Log.d("TrustMan", String.format("reload certs: gen=%d/%d", current_generation, generation));
        KeyStore aks = loadAppKeyStore();
        if(aks == null) {
            throw new TrustMan.Error("could not load appKeyStore");
        }
        X509TrustManager dtm = getTrustManager(0x0, "default");
        if(dtm == null) {
            throw new TrustMan.Error("could not load defaultTrustManager");
        }
        X509TrustManager atm = getTrustManager(aks, "app-init");
        if(atm == null) {
            throw new TrustMan.Error("could not load appTrustManager");
        }
        current_generation = generation;
        appKeyStore = aks;
        defaultTrustManager = dtm;
        appTrustManager = atm;
    }
    
    public static void forget_certs(Context c) {
        boolean status = deleteFile("trusted-certs.keystore");
        generation = (generation + 0x1);
        Log.d("TrustMan", String.format("forget certs: fn=%s status=%b gen=%d", "trusted-certs.keystore", Boolean.valueOf(status), generation));
    }
    
    public void setCallback(TrustMan.Callback cb) {
        parent = cb;
    }
    
    public void clearCallback() {
        parent = 0x0;
    }
    
    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        checkCertTrusted(chain, authType, 0x0);
    }
    
    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        checkCertTrusted(chain, authType, 0x1);
    }
    
    public X509Certificate[] getAcceptedIssuers() {
        check_reload();
        return defaultTrustManager.getAcceptedIssuers();
    }
    
    private void callOnTrustSucceed(boolean appTrusted) {
        if(parent != null) {
            parent.onTrustSucceed(appTrusted);
        }
    }
    
    private void checkCertTrusted(X509Certificate[] chain, String authType, boolean isServer) throws CertificateException {
        // :( Parsing error. Please contact me.
    }
    
    private X509TrustManager getTrustManager(KeyStore ks, String name) {
        // :( Parsing error. Please contact me.
    }
    
    private KeyStore loadAppKeyStore() {
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
        } catch(KeyStoreException e) {
            Log.e("TrustMan", "loadAppKeyStore()", e);
            return ks;
        }
        try {
            ks.load(0x0, 0x0);
            ks.load(new FileInputStream(keyStoreFile), "OpenVPN".toCharArray());
            return ks;
        } catch(FileNotFoundException e) {
            Log.d("TrustMan", "loadAppKeyStore(" + keyStoreFile + ") - file does not exist");
            return ks;
        } catch(Exception e) {
            Log.e("TrustMan", "loadAppKeyStore(" + keyStoreFile + ")", e);
        }
        return ks;
    }
    
    public void trustCert(TrustMan.TrustContext tc) {
        Log.d("TrustMan", "trust cert: " + tc.toString());
        try {
            appKeyStore.setCertificateEntry(tc.chain[0x0].getSubjectDN().toString(), tc.chain[0x0]);
        } catch(KeyStoreException e) {
            Log.e("TrustMan", "trustCert(" + tc.chain + ")", e);
            return;
        }
        X509TrustManager atm = getTrustManager(appKeyStore, "app-reload");
        if(atm != null) {
            appTrustManager = atm;
        }
        try {
            FileOutputStream fos = new FileOutputStream(keyStoreFile);
            appKeyStore.store(fos, "OpenVPN".toCharArray());
            fos.close();
            return;
        } catch(Exception e) {
            Log.e("TrustMan", "trustCert(" + keyStoreFile + ")", e);
        }
    }
    
    private boolean isCertKnown(X509Certificate cert) {
        // :( Parsing error. Please contact me.
    }
    
    private boolean isExpiredException(Throwable e) {
        // :( Parsing error. Please contact me.
    }
    
    public static boolean isTrustFail(Exception e) {
        for(Throwable t = e; t != null; t) {
            if(t instanceof TrustMan.TrustFail) {
                return true;
            }
        }
        return false;
    }
}
