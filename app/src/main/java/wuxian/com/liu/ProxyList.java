/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package wuxian.com.liu;

import org.json.JSONObject;
import org.json.JSONException;
import android.util.Log;
import android.content.Context;
import java.util.TreeMap;
import java.util.Comparator;
import org.json.JSONArray;
import java.util.Collection;
import java.util.Set;
import java.io.IOException;
import org.json.JSONTokener;

public class ProxyList {
    private static final String TAG = "ProxyList";
    
    public ProxyList.Item get(String name) {
        if(!is_none(name)) {
            return (ProxyList.Item)list.get(name);
        }
        return null;
    }
    
    public ProxyList.Item get_enabled_item() {
        return get(enabled_name);
    }
    
    public void put(ProxyList.Item item) {
        if(item != null) {
            String name = item.name();
            if(!is_none(name)) {
                list.put(name, item);
                dirty = true;
            }
        }
    }
    
    public void remove(String name) {
        if(!is_none(name)) {
            list.remove(name);
            set_enabled(0x0);
            dirty = true;
        }
    }
    
    public void set_enabled(String name) {
        String prev = enabled_name;
        if(name == null) {
            name = enabled_name;
        }
        if(is_none(name)) {
            enabled_name = none_name;
        } else {
            ProxyList.Item item = get(name);
            if(item != null) {
                enabled_name = name;
            } else {
                enabled_name = none_name;
            }
        }
        if((prev == null) || (!prev.equals(enabled_name))) {
            dirty = true;
        }
    }
    
    public String get_enabled(boolean include_none) {
        if((include_none) || (!is_none(enabled_name))) {
            return enabled_name;
        }
        return null;
    }
    
    public String[] get_name_list(boolean include_none) {
        int size = list.size();
        String[] ret = (String[])list.keySet().toArray(new String[(include_none ? 0x1 : 0x0 + size)]);
        if(include_none) {
            ret[size] = none_name;
        }
        return ret;
    }
    
    public boolean is_none(String name) {
        // :( Parsing error. Please contact me.
    }
    
    public int size() {
        return list.size();
    }
    
    public boolean has_saved_creds(String name) {
        ProxyList.Item item = get(name);
        if(item != null) {
            boolean localboolean1 = item.username.length() > 0;
        }
        return false;
    }
    
    public void forget_creds(String name) {
        forget_creds(get(name));
    }
    
    public void forget_creds() {
        for(ProxyList.Item item : list.values()) {
            forget_creds(item);
        }
    }
    
    ProxyList(String none_name) {
        if(none_name == null) {
            throw new ProxyList.InternalError();
        }
        none_name = none_name;
        set_enabled(0x0);
    }
    
    public void set_backing_file(Context context, String backing_file) {
        context = context;
        backing_file = backing_file;
    }
    
    public void load() {
        try {
            if(backing_file != null) {
                String jtxt = FileUtil.readFileAppPrivate(context, backing_file);
                JSONObject j = (JSONObject)new JSONTokener(jtxt).nextValue();
                ProxyList pl = unpersist(j, none_name);
                list = pl.list;
                enabled_name = pl.enabled_name;
                dirty = false;
                return;
            }
        } catch(IOException e) {
            Log.d("ProxyList", "ProxyList.load: no proxy file present");
            return;
        } catch(Exception e) {
            Log.e("ProxyList", "ProxyList.load", e);
        }
    }
    
    public void save() {
        try {
            if((dirty) && (backing_file != null)) {
                JSONObject j = persist();
                String jtxt = j.toString(0x4);
                FileUtil.writeFileAppPrivate(context, backing_file, jtxt);
                dirty = false;
                return;
            }
        } catch(Exception e) {
            Log.e("ProxyList", "ProxyList.save", e);
        }
    }
    
    private void forget_creds(ProxyList.Item item) {
        if(item != null) {
            item.username = "";
            item.password = "";
            dirty = true;
        }
    }
    
    private JSONObject persist() {
        // :( Parsing error. Please contact me.
    }
    
    private static ProxyList unpersist(JSONObject j, String none_name) {
        try {
            ProxyList pl = new ProxyList(none_name);
            if(!isNull("enabled_name")) {
                pl.enabled_name = getString("enabled_name");
            }
            JSONArray ja = getJSONArray("list");
            int length = ja.length();
            for(int i = 0x0; i < length; i = i + 0x1) {
                JSONObject jo = ja.getJSONObject(i);
                ProxyList.Item item = ProxyList.Item.unpersist(jo);
                pl.put(item);
            }
            pl.set_enabled(0x0);
            return pl;
        } catch(JSONException e) {
            Log.e("ProxyList", "ProxyList.unpersist", e);
            return null;
        }
        return pl;
    }
    private TreeMap<String, ProxyList.Item> list = new TreeMap(String.CASE_INSENSITIVE_ORDER);
    private String enabled_name = 0x0;
    private String none_name = 0x0;
    private Context context = 0x0;
    private String backing_file = 0x0;
    private boolean dirty = false;
}
