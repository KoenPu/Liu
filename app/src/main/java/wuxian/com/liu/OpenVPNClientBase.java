/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package wuxian.com.liu;

import android.app.Activity;
import android.content.ServiceConnection;
import android.content.Context;
import android.preference.PreferenceManager;
import android.content.SharedPreferences;
import android.content.Intent;
import android.util.Log;
import java.util.Date;
import java.text.DateFormat;
import android.view.KeyEvent;
import android.os.Parcelable;
import java.security.Security;
import java.security.Provider;
import android.app.PendingIntent;
import android.content.pm.PackageManager;
import android.content.pm.PackageInfo;
import android.os.Handler;
import java.io.IOException;
import android.security.KeyChain;
import java.util.ArrayDeque;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.content.res.Resources;
import android.security.KeyChainAliasCallback;
import android.content.ComponentName;

public abstract class OpenVPNClientBase extends Activity implements OpenVPNService.EventReceiver {
    private static final String TAG = "OpenVPNClientBase";
    private OpenVPNService mBoundService;
    private ServiceConnection mConnection;
    
    public OpenVPNClientBase() {
        mBoundService = 0x0;
        mConnection = new ServiceConnection(this) {
            
            public void onServiceConnected(ComponentName className, IBinder service) {
                mBoundService = service.getService();
                Log.d("OpenVPNClientBase", "CLIBASE: onServiceConnected: " + mBoundService.toString());
                mBoundService.client_attach(this$0);
                post_bind();
            }
            
            public void onServiceDisconnected(ComponentName className) {
                Log.d("OpenVPNClientBase", "CLIBASE: onServiceDisconnected");
                mBoundService = 0x0;
            }
        };
    }
    
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }
    
    protected void doBindService() {
        bindService(new Intent(this, OpenVPNService.class).setAction("net.openvpn.openvpn.BIND"), mConnection, 0x41);
    }
    
    protected void doUnbindService() {
        Log.d("OpenVPNClientBase", "CLIBASE: doUnbindService");
        if(mBoundService != null) {
            mBoundService.client_detach(this);
            unbindService(mConnection);
            mBoundService = 0x0;
        }
    }
    
    protected void post_bind() {
    }
    
    public void event(OpenVPNService.EventMsg ev) {
    }
    
    public void log(OpenVPNService.LogMsg lm) {
    }
    
    public PendingIntent get_configure_intent(int requestCode) {
        return null;
    }
    
    protected boolean is_active() {
        boolean active = 0x0;
        if(mBoundService != null) {
            if(mBoundService.is_active()) {
                return active;
            }
        }
        return active;
    }
    
    protected OpenVPNService.Profile current_profile() {
        if(mBoundService != null) {
            return mBoundService.get_current_profile();
        }
        return null;
    }
    
    protected OpenVPNService.ProfileList profile_list() {
        if(mBoundService != null) {
            return mBoundService.get_profile_list();
        }
        return null;
    }
    
    protected long max_profile_size() {
        return OpenVPNService.max_profile_size();
    }
    
    protected OpenVPNService.MergedProfile merge_parse_profile(String basename, String profile_content) {
        if(mBoundService != null) {
            return mBoundService.merge_parse_profile(basename, profile_content);
        }
        return null;
    }
    
    protected ClientAPI_LLVector get_stat_values_full() {
        if(mBoundService != null) {
            return mBoundService.stat_values_full();
        }
        return null;
    }
    
    protected OpenVPNService.ConnectionStats get_connection_stats() {
        if(mBoundService != null) {
            return mBoundService.get_connection_stats();
        }
        return null;
    }
    
    protected long get_tunnel_bytes_per_cpu_second() {
        if(mBoundService != null) {
            return mBoundService.get_tunnel_bytes_per_cpu_second();
        }
        return 0x0;
    }
    
    protected OpenVPNService.EventMsg get_last_event() {
        if(mBoundService != null) {
            return mBoundService.get_last_event();
        }
        return null;
    }
    
    protected OpenVPNService.EventMsg get_last_event_prof_manage() {
        if(mBoundService != null) {
            return mBoundService.get_last_event_prof_manage();
        }
        return null;
    }
    
    public ArrayDeque log_history() {
        if(mBoundService != null) {
            return mBoundService.log_history();
        }
        return null;
    }
    
    protected void jellyBeanHackPurge() {
        if(mBoundService != null) {
            mBoundService.jellyBeanHackPurge();
        }
    }
    
    protected ProxyList get_proxy_list() {
        if(mBoundService != null) {
            return mBoundService.proxy_list;
        }
        return null;
    }
    
    public void gen_proxy_context_expired_event() {
        if(mBoundService != null) {
            mBoundService.gen_proxy_context_expired_event();
        }
    }
    
    protected void gen_ui_reset_event(boolean exclude_self) {
        if(mBoundService != null) {
            mBoundService.gen_ui_reset_event(exclude_self, this);
        }
    }
    
    protected String get_gui_version(String name) {
        String versionName = "0.0";
        int versionCode = 0x0;
        try {
            PackageInfo pi = getPackageManager().getPackageInfo(getPackageName(), 0x0);
            String versionName = pi.versionName;
            int versionCode = pi.versionCode;
        } catch(Exception e) {
            Log.e("OpenVPNClientBase", "cannot obtain version info", e);
        }
        return String.format("%s %s-%d", name, versionName, versionCode);
    }
    
    protected void submitConnectIntent(String profile_name, String server, String vpn_proto, String conn_timeout, String username, String password, boolean cache_password, String pk_password, String response, String epki_alias, String compression_mode, String proxy_name, String proxy_username, String proxy_password, boolean proxy_allow_creds_dialog, String gui_version) {
        String prefix = "net.openvpn.openvpn";
        Intent intent = new Intent(this, OpenVPNService.class).setAction("net.openvpn.openvpn.CONNECT").putExtra(prefix + ".PROFILE", profile_name).putExtra(prefix + ".GUI_VERSION", gui_version).putExtra(prefix + ".PROXY_NAME", proxy_name).putExtra(prefix + ".PROXY_USERNAME", proxy_username).putExtra(prefix + ".PROXY_PASSWORD", proxy_password).putExtra(prefix + ".PROXY_ALLOW_CREDS_DIALOG", proxy_allow_creds_dialog).putExtra(prefix + ".SERVER", server).putExtra(prefix + ".PROTO", vpn_proto).putExtra(prefix + ".CONN_TIMEOUT", conn_timeout).putExtra(prefix + ".USERNAME", username).putExtra(prefix + ".PASSWORD", password).putExtra(prefix + ".CACHE_PASSWORD", cache_password).putExtra(prefix + ".PK_PASSWORD", pk_password).putExtra(prefix + ".RESPONSE", response).putExtra(prefix + ".EPKI_ALIAS", epki_alias).putExtra(prefix + ".COMPRESSION_MODE", compression_mode);
        if(mBoundService != null) {
            mBoundService.client_attach(this);
        }
        ComponentName serv = startService(intent);
        Log.d("OpenVPNClientBase", "CLI: submitConnectIntent: " + profile_name);
    }
    
    public static void autostart(Context context) {
        PrefUtil prefs = new PrefUtil(PreferenceManager.getDefaultSharedPreferences(context));
        String profile_name = prefs.get_string("autostart_profile_name");
        if(profile_name != null) {
            prefs.delete_key("autostart_profile_name");
            if(prefs.get_boolean("autostart", false)) {
                Intent intent = new Intent(context, OpenVPNClient.class).addFlags(0x10800000).putExtra("net.openvpn.openvpn.AUTOSTART_PROFILE_NAME", profile_name);
                startActivity(intent);
                Log.d("OpenVPNClientBase", "CLIBASE: autostart profile=\'" + profile_name + "\' intent=" + intent.toString());
            }
        }
    }
    
    protected Intent buildDisconnectIntent(boolean stop_service) {
        String prefix = "net.openvpn.openvpn";
        Intent intent = new Intent(this, OpenVPNService.class).setAction("net.openvpn.openvpn.DISCONNECT").putExtra(prefix + ".STOP", stop_service);
        return intent;
    }
    
    protected void submitDisconnectIntent(boolean stop_service) {
        Log.d("OpenVPNClientBase", "CLIBASE: submitDisconnectIntent");
        startService(buildDisconnectIntent(stop_service));
    }
    
    protected void submitImportProfileIntent(String profile_content, String save_as_filename, boolean merge) {
        String prefix = "net.openvpn.openvpn";
        Intent intent = new Intent(this, OpenVPNService.class).setAction("net.openvpn.openvpn.IMPORT_PROFILE").putExtra(prefix + ".CONTENT", profile_content).putExtra(prefix + ".FILENAME", save_as_filename).putExtra(prefix + ".MERGE", merge);
        ComponentName serv = startService(intent);
    }
    
    protected void submitImportProfileViaPathIntent(String profile_path) {
        String prefix = "net.openvpn.openvpn";
        Intent intent = new Intent(this, OpenVPNService.class).setAction("net.openvpn.openvpn.ACTION_IMPORT_PROFILE_VIA_PATH").putExtra(prefix + ".PATH", profile_path);
        ComponentName serv = startService(intent);
    }
    
    protected void submitDeleteProfileIntent(String profile_name) {
        String prefix = "net.openvpn.openvpn";
        Intent intent = new Intent(this, OpenVPNService.class).setAction("net.openvpn.openvpn.DELETE_PROFILE").putExtra(prefix + ".PROFILE", profile_name);
        ComponentName serv = startService(intent);
    }
    
    protected void submitDeleteProfileIntentWithConfirm(String profile_name) {
        OpenVPNClientBase.2 dialogClickListener = new DialogInterface.OnClickListener(this, profile_name) {
            
            public void onClick(DialogInterface dialog, int which) {
                switch(which) {
                    case -1:
                    {
                        submitDeleteProfileIntent(profile_name);
                        break;
                    }
                }
            }
        };
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(0x7f060089).setMessage(profile_name).setPositiveButton(0x7f06008a, dialogClickListener).setNegativeButton(0x7f06008b, dialogClickListener).show();
    }
    
    protected void submitRenameProfileIntent(String profile_name, String new_profile_name) {
        String prefix = "net.openvpn.openvpn";
        Intent intent = new Intent(this, OpenVPNService.class).setAction("net.openvpn.openvpn.RENAME_PROFILE").putExtra(prefix + ".PROFILE", profile_name).putExtra(prefix + ".NEW_PROFILE", new_profile_name);
        ComponentName serv = startService(intent);
    }
    
    protected void createConnectShortcut(String profile_name, String shortcut_name) {
        Intent shortcutIntent = new Intent(this, OpenVPNClient.class).addFlags(0x800000).putExtra("net.openvpn.openvpn.AUTOSTART_PROFILE_NAME", profile_name);
        Intent addIntent = new Intent().setAction("com.android.launcher.action.INSTALL_SHORTCUT").putExtra("android.intent.extra.shortcut.INTENT", shortcutIntent).putExtra("android.intent.extra.shortcut.NAME", shortcut_name).putExtra("android.intent.extra.shortcut.ICON_RESOURCE", Intent.ShortcutIconResource.fromContext(getApplicationContext(), 0x7f02000b));
        getApplicationContext().sendBroadcast(addIntent);
    }
    
    protected void createDisconnectShortcut(String shortcut_name) {
        Intent shortcutIntent = new Intent(this, OpenVPNDisconnect.class).addFlags(0x800000);
        Intent addIntent = new Intent().setAction("com.android.launcher.action.INSTALL_SHORTCUT").putExtra("android.intent.extra.shortcut.INTENT", shortcutIntent).putExtra("android.intent.extra.shortcut.NAME", shortcut_name).putExtra("android.intent.extra.shortcut.ICON_RESOURCE", Intent.ShortcutIconResource.fromContext(getApplicationContext(), 0x7f02000d));
        getApplicationContext().sendBroadcast(addIntent);
    }
    
    protected void createAppShortcut(String shortcut_name) {
        Intent shortcutIntent = new Intent(this, OpenVPNClient.class);
        Intent addIntent = new Intent().setAction("com.android.launcher.action.INSTALL_SHORTCUT").putExtra("android.intent.extra.shortcut.INTENT", shortcutIntent).putExtra("android.intent.extra.shortcut.NAME", shortcut_name).putExtra("android.intent.extra.shortcut.ICON_RESOURCE", Intent.ShortcutIconResource.fromContext(getApplicationContext(), 0x7f020008));
        getApplicationContext().sendBroadcast(addIntent);
    }
    
    protected void resolveExternalPkiAlias(OpenVPNService.Profile prof, OpenVPNClientBase.EpkiPost next_action) {
        Handler handler = new Handler();
        OpenVPNClientBase topthis = this;
        OpenVPNClientBase.3 response = new KeyChainAliasCallback(this, next_action, handler) {
            
            public void alias(String alias) {
                if(alias != null) {
                    OpenVPNClientBase.3.1 task = new Runnable(this, alias) {
                        
                        public void run() {
                            val$next_action.post_dispatch(alias);
                        }
                    };
                    handler.post(task);
                }
            }
        };
        OpenVPNClientBase.4 dialogClickListener = new DialogInterface.OnClickListener(this, topthis, response, next_action) {
            
            public void onClick(DialogInterface dialog, int which) {
                switch(which) {
                    case -1:
                    {
                        KeyChain.choosePrivateKeyAlias(topthis, response, new String[] {"RSA"}, 0x0, 0x0, -0x1, 0x0);
                        return;
                    }
                    case -2:
                    {
                        next_action.post_dispatch("DISABLE_CLIENT_CERT");
                        break;
                    }
                }
            }
        };
        if((prof != null) && (prof.need_external_pki_alias())) {
            AlertDialog.Builder builder = new AlertDialog.Builder(topthis);
            builder.setTitle(0x7f06008c).setMessage(0x7f06008d).setPositiveButton(0x7f06008f, dialogClickListener).setNegativeButton(0x7f06008e, dialogClickListener).show();
            return;
        }
        next_action.post_dispatch(0x0);
    }
    
    protected void import_pkcs12(String path) {
        jellyBeanHackPurge();
        try {
            Intent intent = KeyChain.createInstallIntent();
            byte[] p12 = FileUtil.readFileByteArray(path, 0x40000);
            intent.putExtra("PKCS12", p12);
            startActivity(intent);
            return;
        } catch(IOException e) {
            ok_dialog(String.format("[ %s ] %s", path, getText(0x7f060039)));
        }
    }
    
    protected static String render_duration(int duration) {
        int seconds = duration % 0x3c;
        int minutes = (duration / 0x3c) % 0x3c;
        int hours = duration / 0xe10;
        return String.format("%d:%02d:%02d", hours, minutes, seconds);
    }
    
    protected void ok_dialog(String text) {
        new AlertDialog.Builder(this).setTitle(text).setPositiveButton(0x7f060003, new OpenVPNClientBase.5(this)).show();
    }
    
    protected void ok_dialog(String title, String message) {
        new AlertDialog.Builder(this).setTitle(title).setMessage(message).setPositiveButton(0x7f060003, new OpenVPNClientBase.6(this)).show();
    }
    
    protected boolean action_enter(int actionId, KeyEvent event) {
        // :( Parsing error. Please contact me.
    }
    
    protected void raise_file_selection_dialog(int requestCode, int prompt_res_id) {
        Intent intent = new Intent(this, FileDialog.class).putExtra("START_PATH", "/sdcard").putExtra("CAN_SELECT_DIR", false).putExtra("SELECTION_MODE", 0x1).putExtra("OPTION_ONE_CLICK_SELECT", false).putExtra("OPTION_PROMPT", resString(prompt_res_id));
        startActivityForResult(intent, requestCode);
    }
    
    protected static String get_app_expire_string() {
        Date expire = OpenVPNService.get_app_expire();
        if(expire != null) {
            return DateFormat.getDateTimeInstance().format(expire);
        }
        return null;
    }
    
    protected void warn_app_expiration(PrefUtil prefs) {
        String expire_string = get_app_expire_string();
        if(expire_string != null) {
            String saved_expire_string = prefs.get_string("app_expire_string");
            if(!expire_string.equals(saved_expire_string)) {
                ok_dialog(String.format(resString(0x7f060006), expire_string));
                prefs.set_string("app_expire_string", expire_string);
            }
        }
    }
    
    protected static String get_openvpn_core_platform() {
        return OpenVPNService.get_openvpn_core_platform();
    }
    
    protected void init_default_preferences(PrefUtil prefs) {
        if(!prefs.contains_key("vpn_proto")) {
            prefs.set_string("vpn_proto", "adaptive");
        }
        if(!prefs.contains_key("conn_timeout")) {
            prefs.set_string("conn_timeout", "60");
        }
        if(!prefs.contains_key("compression_mode")) {
            prefs.set_string("compression_mode", "yes");
        }
        if(!prefs.contains_key("tls_version_min_override")) {
            prefs.set_string("tls_version_min_override", "default");
        }
        if(!prefs.contains_key("auto_keyboard")) {
            prefs.set_boolean("auto_keyboard", true);
        }
        if(!prefs.contains_key("google_dns_fallback")) {
            prefs.set_boolean("google_dns_fallback", true);
        }
        if(!prefs.contains_key("autostart_finish_on_connect")) {
            prefs.set_boolean("autostart_finish_on_connect", true);
        }
    }
    
    protected String resString(int res_id) {
        return getResources().getString(res_id);
    }
    
    protected void importProfileRemote(HttpsClient.AuthContext ac, boolean prefer_autologin, HttpsClient.CancelDetect.I cancel_source, Runnable on_success, Runnable on_fail, String save_as_filename, boolean enable_cert_dialog, boolean enable_trust_error_dialog) {
        Handler handler = new Handler();
        HttpsClient.CancelDetect cancel = new HttpsClient.CancelDetect(cancel_source);
        OpenVPNClientBase.7 task = new HttpsClient.Task(this, ac, this, cancel, save_as_filename, handler, on_success) {
            
            public void run() {
                // :( Parsing error. Please contact me.
            }
            
            private void dispatch_prof(String profile_content) {
                OpenVPNClientBase.7.1 mytask = new Runnable(this, profile_content) {
                    
                    public void run() {
                        if(!val$cancel.is_canceled()) {
                            if(val$save_as_filename != null) {
                                submitImportProfileIntent(profile_content, val$save_as_filename, true);
                            } else {
                                submitImportProfileIntent(profile_content, "client.ovpn", true);
                            }
                            val$handler.post(val$on_success);
                        }
                    }
                };
                handler.post(mytask);
            }
        };
        HttpsClient.run_task(this, task, cancel_source, on_fail, enable_cert_dialog, enable_trust_error_dialog, max_profile_size());
    }
    
    protected void dumpCryptoAlgs() {
        // :( Parsing error. Please contact me.
    }
}
